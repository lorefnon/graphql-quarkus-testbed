/*
 * This file is generated by jOOQ.
 */
package com.example.dal.generated.jooq.tables;


import com.example.dal.generated.jooq.Keys;
import com.example.dal.generated.jooq.Public;
import com.example.dal.generated.jooq.tables.records.NotebookRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Notebook extends TableImpl<NotebookRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.notebook</code>
     */
    public static final Notebook NOTEBOOK = new Notebook();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotebookRecord> getRecordType() {
        return NotebookRecord.class;
    }

    /**
     * The column <code>public.notebook.id</code>.
     */
    public final TableField<NotebookRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.notebook.title</code>.
     */
    public final TableField<NotebookRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(300).nullable(false), this, "");

    /**
     * The column <code>public.notebook.description</code>.
     */
    public final TableField<NotebookRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.notebook.creator_id</code>.
     */
    public final TableField<NotebookRecord, Integer> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.INTEGER, this, "");

    private Notebook(Name alias, Table<NotebookRecord> aliased) {
        this(alias, aliased, null);
    }

    private Notebook(Name alias, Table<NotebookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.notebook</code> table reference
     */
    public Notebook(String alias) {
        this(DSL.name(alias), NOTEBOOK);
    }

    /**
     * Create an aliased <code>public.notebook</code> table reference
     */
    public Notebook(Name alias) {
        this(alias, NOTEBOOK);
    }

    /**
     * Create a <code>public.notebook</code> table reference
     */
    public Notebook() {
        this(DSL.name("notebook"), null);
    }

    public <O extends Record> Notebook(Table<O> child, ForeignKey<O, NotebookRecord> key) {
        super(child, key, NOTEBOOK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<NotebookRecord, Integer> getIdentity() {
        return (Identity<NotebookRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotebookRecord> getPrimaryKey() {
        return Keys.NOTEBOOK_PKEY;
    }

    @Override
    public List<ForeignKey<NotebookRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NOTEBOOK__FK_NOTEBOOK__CREATOR_ID);
    }

    private transient AppUser _appUser;

    /**
     * Get the implicit join path to the <code>public.app_user</code> table.
     */
    public AppUser appUser() {
        if (_appUser == null)
            _appUser = new AppUser(this, Keys.NOTEBOOK__FK_NOTEBOOK__CREATOR_ID);

        return _appUser;
    }

    @Override
    public Notebook as(String alias) {
        return new Notebook(DSL.name(alias), this);
    }

    @Override
    public Notebook as(Name alias) {
        return new Notebook(alias, this);
    }

    @Override
    public Notebook as(Table<?> alias) {
        return new Notebook(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Notebook rename(String name) {
        return new Notebook(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notebook rename(Name name) {
        return new Notebook(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notebook rename(Table<?> name) {
        return new Notebook(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
