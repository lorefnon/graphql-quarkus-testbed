/*
 * This file is generated by jOOQ.
 */
package com.example.dal.generated.jooq.tables.daos


import com.example.dal.generated.jooq.tables.AppUser
import com.example.dal.generated.jooq.tables.records.AppUserRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AppUserDao(configuration: Configuration?) : DAOImpl<AppUserRecord, com.example.dal.generated.jooq.tables.pojos.AppUser, Int>(AppUser.APP_USER, com.example.dal.generated.jooq.tables.pojos.AppUser::class.java, configuration) {

    /**
     * Create a new AppUserDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.example.dal.generated.jooq.tables.pojos.AppUser): Int? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Int?, upperInclusive: Int?): List<com.example.dal.generated.jooq.tables.pojos.AppUser> = fetchRange(AppUser.APP_USER.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Int): List<com.example.dal.generated.jooq.tables.pojos.AppUser> = fetch(AppUser.APP_USER.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Int): com.example.dal.generated.jooq.tables.pojos.AppUser? = fetchOne(AppUser.APP_USER.ID, value)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String, upperInclusive: String): List<com.example.dal.generated.jooq.tables.pojos.AppUser> = fetchRange(AppUser.APP_USER.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<com.example.dal.generated.jooq.tables.pojos.AppUser> = fetch(AppUser.APP_USER.NAME, *values)
}
