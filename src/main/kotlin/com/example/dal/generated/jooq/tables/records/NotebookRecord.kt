/*
 * This file is generated by jOOQ.
 */
package com.example.dal.generated.jooq.tables.records


import com.example.dal.generated.jooq.tables.Notebook

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class NotebookRecord() : UpdatableRecordImpl<NotebookRecord>(Notebook.NOTEBOOK), Record4<Int?, String?, String?, Int?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var title: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var description: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var creatorId: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Int?, String?, String?, Int?> = super.fieldsRow() as Row4<Int?, String?, String?, Int?>
    override fun valuesRow(): Row4<Int?, String?, String?, Int?> = super.valuesRow() as Row4<Int?, String?, String?, Int?>
    override fun field1(): Field<Int?> = Notebook.NOTEBOOK.ID
    override fun field2(): Field<String?> = Notebook.NOTEBOOK.TITLE
    override fun field3(): Field<String?> = Notebook.NOTEBOOK.DESCRIPTION
    override fun field4(): Field<Int?> = Notebook.NOTEBOOK.CREATOR_ID
    override fun component1(): Int? = id
    override fun component2(): String? = title
    override fun component3(): String? = description
    override fun component4(): Int? = creatorId
    override fun value1(): Int? = id
    override fun value2(): String? = title
    override fun value3(): String? = description
    override fun value4(): Int? = creatorId

    override fun value1(value: Int?): NotebookRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): NotebookRecord {
        this.title = value
        return this
    }

    override fun value3(value: String?): NotebookRecord {
        this.description = value
        return this
    }

    override fun value4(value: Int?): NotebookRecord {
        this.creatorId = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: Int?): NotebookRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised NotebookRecord
     */
    constructor(id: Int? = null, title: String? = null, description: String? = null, creatorId: Int? = null): this() {
        this.id = id
        this.title = title
        this.description = description
        this.creatorId = creatorId
    }

    /**
     * Create a detached, initialised NotebookRecord
     */
    constructor(value: com.example.dal.generated.jooq.tables.pojos.Notebook?): this() {
        if (value != null) {
            this.id = value.id
            this.title = value.title
            this.description = value.description
            this.creatorId = value.creatorId
        }
    }
}
