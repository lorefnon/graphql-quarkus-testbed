/*
 * This file is generated by jOOQ.
 */
package com.example.dal.generated.jooq.tables.records;


import com.example.dal.generated.jooq.tables.Notebook;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotebookRecord extends UpdatableRecordImpl<NotebookRecord> implements Record4<Integer, String, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.notebook.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.notebook.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.notebook.title</code>.
     */
    public void setTitle(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.notebook.title</code>.
     */
    public String getTitle() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.notebook.description</code>.
     */
    public void setDescription(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.notebook.description</code>.
     */
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.notebook.creator_id</code>.
     */
    public void setCreatorId(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.notebook.creator_id</code>.
     */
    public Integer getCreatorId() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Notebook.NOTEBOOK.ID;
    }

    @Override
    public Field<String> field2() {
        return Notebook.NOTEBOOK.TITLE;
    }

    @Override
    public Field<String> field3() {
        return Notebook.NOTEBOOK.DESCRIPTION;
    }

    @Override
    public Field<Integer> field4() {
        return Notebook.NOTEBOOK.CREATOR_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getTitle();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public Integer component4() {
        return getCreatorId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getTitle();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public Integer value4() {
        return getCreatorId();
    }

    @Override
    public NotebookRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public NotebookRecord value2(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public NotebookRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public NotebookRecord value4(Integer value) {
        setCreatorId(value);
        return this;
    }

    @Override
    public NotebookRecord values(Integer value1, String value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NotebookRecord
     */
    public NotebookRecord() {
        super(Notebook.NOTEBOOK);
    }

    /**
     * Create a detached, initialised NotebookRecord
     */
    public NotebookRecord(Integer id, String title, String description, Integer creatorId) {
        super(Notebook.NOTEBOOK);

        setId(id);
        setTitle(title);
        setDescription(description);
        setCreatorId(creatorId);
    }

    /**
     * Create a detached, initialised NotebookRecord
     */
    public NotebookRecord(com.example.dal.generated.jooq.tables.pojos.Notebook value) {
        super(Notebook.NOTEBOOK);

        if (value != null) {
            setId(value.getId());
            setTitle(value.getTitle());
            setDescription(value.getDescription());
            setCreatorId(value.getCreatorId());
        }
    }
}
